{"version":3,"sources":["images/data/1.png","images/data/2.png","images/data/3.png","images/data/4.png","images/data/5.png","images/data/6.png","images/data/7.png","file/EDO-assignment.pdf","images/Jill.jpg","images/Alex.jpg","components/Header/Header.js","components/Sections/Section.js","components/Personas/Persona.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","class","className","href","onClick","document","querySelector","classList","toggle","images","d1","d2","d3","d4","d5","d6","d7","Section","dataPics","map","src","id","target","frameborder","interView","Personas","name","age","location","occupation","quote","about","needs","goals","frastruations","hobbies","img","AlexPic","pref","title","p","JillPic","Persona","personaInfo","persona","alt","hobby","need","goal","fra","for","value","max","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.730c2fac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.ff6cb818.png\";","module.exports = __webpack_public_path__ + \"static/media/2.faff047a.png\";","module.exports = __webpack_public_path__ + \"static/media/3.7eeefb54.png\";","module.exports = __webpack_public_path__ + \"static/media/4.832b6a72.png\";","module.exports = __webpack_public_path__ + \"static/media/5.0ba7ff7c.png\";","module.exports = __webpack_public_path__ + \"static/media/6.541b2995.png\";","module.exports = __webpack_public_path__ + \"static/media/7.7ea96020.png\";","module.exports = __webpack_public_path__ + \"static/media/EDO-assignment.d48d9de0.pdf\";","module.exports = __webpack_public_path__ + \"static/media/Jill.82718d34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Alex.6ca723f8.jpg\";","import React from 'react';\r\nimport \"./Header.css\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Header = () => {\r\n\r\n\r\n    let handleClick = () => {\r\n        let personasNav = document.querySelector(\".personas-nav\");\r\n        personasNav.classList.toggle('close');\r\n    }\r\n    return (\r\n      \r\n            <header>\r\n                <div class='overlay'></div>\r\n                <main>\r\n                    <div class=\"hero\">\r\n                        <h1>UX Personas Roadmap</h1>\r\n                        <h3>For Recipe Website</h3>\r\n                    </div>\r\n\r\n                    <div >\r\n                        <ul className='circle-wrapper'>\r\n                            <li className='circle'>\r\n                                <a href='#idea'>  Initial Idea</a>\r\n                            </li>\r\n                            <li className='circle'>\r\n                                <a href='#interviews'>Interviews</a>\r\n                            </li>\r\n                            <li className='circle hidden-nav'>\r\n                                <a href='#personas' onClick={handleClick}>Personas</a>\r\n                                <ul className='personas-nav close'>\r\n                                    <li> <a href=\"#Alex\">Alex</a> </li>\r\n                                    <li><a href=\"#Jill\">Jill</a></li>\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n\r\n                    </div>\r\n                    <h3> Knarik, Thomas & Cleo</h3>\r\n                </main>\r\n\r\n            </header>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport d1 from '../../images/data/1.png';\r\nimport d2 from '../../images/data/2.png';\r\nimport d3 from '../../images/data/3.png';\r\nimport d4 from '../../images/data/4.png';\r\nimport d5 from '../../images/data/5.png';\r\nimport d6 from '../../images/data/6.png';\r\nimport d7 from '../../images/data/7.png';\r\n\r\nimport interView from '../../file/EDO-assignment.pdf';\r\n\r\n\r\nimport \"./Section.css\";\r\n\r\nconst images =[d1,d2,d3,d4,d5,d6,d7]\r\n\r\nconst Section =()=>{\r\n   const dataPics = images.map((src)=>{\r\n        return (<img src={src} />)\r\n    })\r\n     return(\r\n        <>\r\n        <section id ='idea'>\r\n              <h1>Idea & Survey</h1>\r\n              <p> We started this task with Idea formation and survey creation. We chose our target group and the necessary tool to collect quantitative data. </p>\r\n               <a href='https://docs.google.com/forms/d/e/1FAIpQLSdxZ4Fqi_y9ipGvn_4KnBEn7ighwgVH3BYxTSckWL15xYVPeA/viewform?usp=sf_link' target=\"_blank\"> Link to the survey</a>\r\n            <iframe src=\"https://onedrive.live.com/embed?resid=C57695729AB2A2C9%2120479&amp;authkey=%21AKgUZyNzC0ML4As&amp;em=2&amp;wdAr=1.7777777777777777\"  frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>\r\n        </section>\r\n        <div className='separate'></div>\r\n        <section id='interviews'> \r\n        <h1>Interviews and Data Analysis</h1>\r\n         <p> In this phase we conducted interviews and made transcripts out of them and wrote conclusion, which helped us to summerize all the information</p>\r\n         <a href={interView} target=\"_blank\">Link to interview questions</a>\r\n          <div className='int-pics'>\r\n          {dataPics}\r\n          </div>\r\n          \r\n        </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\nimport './Persona.css';\r\n\r\nimport { GoLocation } from \"react-icons/go\";\r\nimport { AiOutlineUser } from \"react-icons/ai\";\r\nimport { FaUniversity } from \"react-icons/fa\";\r\n\r\nimport JillPic from '../../images/Jill.jpg';\r\nimport AlexPic from '../../images/Alex.jpg'\r\n\r\nimport { GiEarthAsiaOceania } from 'react-icons/gi';\r\n\r\nconst Personas = [\r\n    {\r\n        name: \"Alex Daverto\",\r\n        id:'Alex',\r\n        age: 22,\r\n        location: \"Eindhoven\",\r\n        occupation: \"ICT student\",\r\n        quote: '\"I\\'m sorry for what I said when I was hungry.\"',\r\n        about: \"Alex is a busy student. As much as he cares about nutrition based diet, he still find himself consuming fast food because for his lack of time. Alex is not a good cook, however he really interested in becoming one. He recently started to explore vegetarian diet, which means he needs a quick nutirtion based recipes to make sure he consumes enough protein.\",\r\n        needs: [\"Quick recipes\", 'Video tutoials', \"Recommened alternatives for hard-to-find ingredients\"],\r\n        goals: ['Eat healthy', 'Workout more often', 'Become a better cook'],\r\n        frastruations: ['Often consumes fast food because of lack of time', 'Recipes are not clear and are too long', 'Some ingredients are hard to find'],\r\n        hobbies: ['Gaming', 'Music production', 'Watching movies'],\r\n        img: AlexPic,\r\n        pref: [{\r\n            title: \"Youtube\",\r\n            p: '90'\r\n        },\r\n        {\r\n            title: \"Website\",\r\n            p: '60'\r\n        },\r\n        {\r\n            title: \"Family\",\r\n            p: '60'\r\n        }\r\n\r\n        ]\r\n    },\r\n    {\r\n        name: \"Jill Hilligan\",\r\n        id:'Jill',\r\n        age: 19,\r\n        location: \"Eindhoven\",\r\n        occupation: \"Student\",\r\n        quote: '\"It does not matter how slow you go , as long as you don\\'t stop.\"',\r\n        about: \"Jill loves fitness.She is focused to achieve her peak physiques but she needs help.She knows how to workout but she is not sure on how to eat in order to consume enough nutritions.She's a student so she wants to make simle but very butritious meals.She has a lot of willpower and is ready to do anything to achieve  her goals.The end game for her would be to become a nutrition specialist.\",\r\n        needs: [\"Quick recipes\", 'Nutrition tips'],\r\n        goals: ['To achieve her peak physiques', \"Live healthy\", \"Become a nutrition specialist\"],\r\n        frastruations: [\"Can't cook well\", \"relatively small budget\"],\r\n        hobbies: [\"Fitness\", \"Rock climbing\", \"Netflix\"],\r\n        img: JillPic,\r\n        pref: [{\r\n            title: \"Family\",\r\n            p: '100'\r\n        },\r\n        {\r\n            title: \"Website\",\r\n            p: '90'\r\n        },\r\n        {\r\n            title: \"Social Media\",\r\n            p: '80'\r\n        },\r\n        {\r\n            title: \"Cooking book\",\r\n            p: '50'\r\n        }\r\n\r\n        ]\r\n    },\r\n\r\n]\r\n\r\n\r\nconst Persona = () => {\r\n\r\n    let personaInfo = Personas.map((persona) => {\r\n      return ( <div class='persona-section' id={persona.id}>\r\n            <div className='img-content'>\r\n                <img src={persona.img} alt='' />\r\n                <div className='img-hero'>\r\n                    <h2>{persona.name}</h2>\r\n                    <p> {persona.quote}</p>\r\n                </div>\r\n\r\n            </div>\r\n            <div className='persona-description'>\r\n          \r\n                <div class='personal info'>\r\n                    <h3>Information</h3>\r\n                    <ul>\r\n                        <li> <AiOutlineUser /> Age: {persona.age}</li>\r\n                        <li> <GoLocation /> {persona.location}</li>\r\n                        <li> <FaUniversity /> Occupation: {persona.occupation}</li>\r\n                    </ul>\r\n                </div>\r\n                <div class='about info'>\r\n                    <h3>About</h3>\r\n                    {persona.about}\r\n                </div>\r\n                <div class='hobbies info'>\r\n                    <h3>Hobbies</h3>\r\n                    <ul>\r\n                        {persona.hobbies.map((hobby) => {\r\n                            return (<li>\r\n                                {hobby}\r\n                            </li>)\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                <div class='needs info'>\r\n                    <h3>Needs</h3>\r\n                    <ul>\r\n                        {persona.needs.map((need) => {\r\n                            return (<li>\r\n                                {need}\r\n                            </li>)\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                <div class='goals info'>\r\n                    <h3>Goals</h3>\r\n                    <ul>\r\n                    {persona.goals.map((goal) => {\r\n                        return (<li>\r\n                            {goal}\r\n                        </li>)\r\n                    })}\r\n                    </ul>\r\n                \r\n                </div>\r\n\r\n                <div class='frastruations info'>\r\n                    <h3>Frustrations</h3>\r\n                    <ul>\r\n                        {persona.frastruations.map((fra) => {\r\n                            return (<li>\r\n                                {fra}\r\n                            </li>)\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                <div class='preferedway info'>\r\n                    <h3>Preffered way to look for recipes</h3>\r\n                    {\r\n                        persona.pref.map(({title, p}) => {\r\n                            return (\r\n                                <>\r\n                                    <label for=\"file\">{title}:</label>\r\n                                    <progress id=\"file\" value={p} max=\"100\"> {p} </progress>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n               \r\n            </div>\r\n        </div>)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {personaInfo}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Persona;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Section from './components/Sections/Section';\nimport Persona from './components/Personas/Persona';\n\nfunction App() {\n\n  return (\n\n    <div className='App'>\n      <Header />\n      <Section />\n      <div className='sep-personas'><h1>Personas</h1></div>\n      <Persona />\n\n    </div>\n      \n  \n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}